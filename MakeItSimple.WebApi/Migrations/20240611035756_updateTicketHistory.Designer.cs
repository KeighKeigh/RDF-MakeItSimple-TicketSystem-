// <auto-generated />
using System;
using MakeItSimple.WebApi.DataAccessLayer.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakeItSimple.WebApi.Migrations
{
    [DbContext(typeof(MisDbContext))]
    [Migration("20240611035756_updateTicketHistory")]
    partial class updateTicketHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitles")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_titles");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account_titles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_account_titles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_account_titles_modified_by");

                    b.ToTable("account_titles", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approvers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approvers_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_approvers_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_approvers_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_approvers_sub_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approvers_user_id");

                    b.ToTable("approvers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("BusinessCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_code");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_name");

                    b.Property<int?>("Business_No")
                        .HasColumnType("int")
                        .HasColumnName("business_no");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_business_units_added_by");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_business_units_company_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_business_units_modified_by");

                    b.ToTable("business_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_description");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_categories_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_categories_modified_by");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("channel_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_channels_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_channels_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_channels_modified_by");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_channels_project_id");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_channels_sub_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channels_user_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channel_users");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_channel_users_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_users_user_id");

                    b.ToTable("channel_users", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_code");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<int>("CompanyNo")
                        .HasColumnType("int")
                        .HasColumnName("company_no");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_companies_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_companies_modified_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_name");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int")
                        .HasColumnName("department_no");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_departments_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_departments_business_unit_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_departments_modified_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_code");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<int>("LocationNo")
                        .HasColumnType("int")
                        .HasColumnName("location_no");

                    b.Property<string>("Manual")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manual");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_locations_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_locations_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_locations_sub_unit_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ProjectSetup.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("project_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_projects_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_projects_modified_by");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_receivers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_receivers_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_receivers_business_unit_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_receivers_modified_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_receivers_user_id");

                    b.ToTable("receivers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubCategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_category_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_categories_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_sub_categories_category_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_categories_modified_by");

                    b.ToTable("sub_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Manual")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manual");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubUnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_code");

                    b.Property<string>("SubUnitName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_name");

                    b.Property<int?>("SubUnitNo")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_no");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_units_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_sub_units_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_units_modified_by");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_sub_units_unit_id");

                    b.ToTable("sub_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.TeamSetup.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("team_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_teams_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_teams_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_teams_sub_unit_id");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_code");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int")
                        .HasColumnName("unit_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_units_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_units_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_units_modified_by");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<int?>("ClosingTicketId")
                        .HasColumnType("int")
                        .HasColumnName("closing_ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_approve");

                    b.Property<int?>("ReTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("re_ticket_concern_id");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketReDateId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_re_date_id");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<int?>("TransferTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_ticket_concern_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_ticketings");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approver_ticketings_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_approver_ticketings_channel_id");

                    b.HasIndex("ClosingTicketId")
                        .HasDatabaseName("ix_approver_ticketings_closing_ticket_id");

                    b.HasIndex("ReTicketConcernId")
                        .HasDatabaseName("ix_approver_ticketings_re_ticket_concern_id");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_approver_ticketings_request_transaction_id");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_approver_ticketings_sub_unit_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_approver_ticketings_ticket_concern_id");

                    b.HasIndex("TicketReDateId")
                        .HasDatabaseName("ix_approver_ticketings_ticket_re_date_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_approver_ticketings_ticket_transaction_id");

                    b.HasIndex("TransferTicketConcernId")
                        .HasDatabaseName("ix_approver_ticketings_transfer_ticket_concern_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approver_ticketings_user_id");

                    b.ToTable("approver_ticketings", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<Guid?>("ClosedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closed_by");

                    b.Property<DateTime?>("ClosingAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("closing_at");

                    b.Property<string>("ClosingRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("closing_remarks");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsClosing")
                        .HasColumnType("bit")
                        .HasColumnName("is_closing");

                    b.Property<bool>("IsRejectClosed")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_closed");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime?>("RejectClosedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_closed_at");

                    b.Property<Guid?>("RejectClosedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_closed_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolution");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<string>("TicketNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticket_no");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_closing_tickets");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_closing_tickets_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_closing_tickets_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_closing_tickets_channel_id");

                    b.HasIndex("ClosedBy")
                        .HasDatabaseName("ix_closing_tickets_closed_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_closing_tickets_modified_by");

                    b.HasIndex("RejectClosedBy")
                        .HasDatabaseName("ix_closing_tickets_reject_closed_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_closing_tickets_request_transaction_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_closing_tickets_sub_category_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_closing_tickets_ticket_concern_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_closing_tickets_ticket_transaction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_closing_tickets_user_id");

                    b.ToTable("closing_tickets", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ReTicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsReTicket")
                        .HasColumnType("bit")
                        .HasColumnName("is_re_ticket");

                    b.Property<bool>("IsRejectReTicket")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_re_ticket");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ReTicketAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("re_ticket_at");

                    b.Property<Guid?>("ReTicketBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("re_ticket_by");

                    b.Property<string>("ReTicketRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("re_ticket_remarks");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<DateTime?>("RejectReTicketAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_re_ticket_at");

                    b.Property<Guid?>("RejectReTicketBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_re_ticket_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<string>("TicketNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticket_no");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_re_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_re_ticket_concerns_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_re_ticket_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_re_ticket_concerns_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_re_ticket_concerns_modified_by");

                    b.HasIndex("ReTicketBy")
                        .HasDatabaseName("ix_re_ticket_concerns_re_ticket_by");

                    b.HasIndex("RejectReTicketBy")
                        .HasDatabaseName("ix_re_ticket_concerns_reject_re_ticket_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_re_ticket_concerns_request_transaction_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_re_ticket_concerns_sub_category_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_re_ticket_concerns_ticket_concern_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_re_ticket_concerns_ticket_transaction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_re_ticket_concerns_user_id");

                    b.ToTable("re_ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Concern")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern");

                    b.Property<string>("ConcernStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_status");

                    b.Property<DateTime?>("Confirm_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("confirm_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("is_done");

                    b.Property<bool>("IsReject")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject");

                    b.Property<bool?>("Is_Confirm")
                        .HasColumnType("bit")
                        .HasColumnName("is_confirm");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("RejectBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolution");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_request_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_request_concerns_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_request_concerns_modified_by");

                    b.HasIndex("RejectBy")
                        .HasDatabaseName("ix_request_concerns_reject_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_request_concerns_request_transaction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_request_concerns_user_id");

                    b.ToTable("request_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_request_transactions");

                    b.ToTable("request_transactions", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<int?>("ClosingTicketId")
                        .HasColumnType("int")
                        .HasColumnName("closing_ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("ReTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("re_ticket_concern_id");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketReDateId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_re_date_id");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<int?>("TransferTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_ticket_concern_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ticket_attachments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_attachments_added_by");

                    b.HasIndex("ClosingTicketId")
                        .HasDatabaseName("ix_ticket_attachments_closing_ticket_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_attachments_modified_by");

                    b.HasIndex("ReTicketConcernId")
                        .HasDatabaseName("ix_ticket_attachments_re_ticket_concern_id");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_attachments_request_transaction_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_attachments_ticket_concern_id");

                    b.HasIndex("TicketReDateId")
                        .HasDatabaseName("ix_ticket_attachments_ticket_re_date_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_ticket_attachments_ticket_transaction_id");

                    b.HasIndex("TransferTicketConcernId")
                        .HasDatabaseName("ix_ticket_attachments_transfer_ticket_concern_id");

                    b.ToTable("ticket_attachments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsClicked")
                        .HasColumnType("bit")
                        .HasColumnName("is_clicked");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ticket_comments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_comments_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_comments_modified_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_comments_request_transaction_id");

                    b.ToTable("ticket_comments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCommentView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<bool?>("IsClicked")
                        .HasColumnType("bit")
                        .HasColumnName("is_clicked");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<int?>("TicketCommentId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_comment_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_comment_views");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_comment_views_added_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_comment_views_request_transaction_id");

                    b.HasIndex("TicketCommentId")
                        .HasDatabaseName("ix_ticket_comment_views_ticket_comment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_comment_views_user_id");

                    b.ToTable("ticket_comment_views", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_by");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<Guid?>("ClosedApproveBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closed_approve_by");

                    b.Property<DateTime?>("Closed_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("closed_at");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_details");

                    b.Property<string>("ConcernStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_approve");

                    b.Property<bool?>("IsAssigned")
                        .HasColumnType("bit")
                        .HasColumnName("is_assigned");

                    b.Property<bool?>("IsClosedApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_closed_approve");

                    b.Property<bool>("IsClosedReject")
                        .HasColumnType("bit")
                        .HasColumnName("is_closed_reject");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("is_done");

                    b.Property<bool?>("IsReDate")
                        .HasColumnType("bit")
                        .HasColumnName("is_re_date");

                    b.Property<bool?>("IsReTicket")
                        .HasColumnType("bit")
                        .HasColumnName("is_re_ticket");

                    b.Property<bool>("IsReject")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ReDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("re_date_at");

                    b.Property<Guid?>("ReDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("re_date_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestConcernId")
                        .HasColumnType("int")
                        .HasColumnName("request_concern_id");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<Guid?>("RequestorBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestor_by");

                    b.Property<DateTime?>("ReticketAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reticket_at");

                    b.Property<Guid?>("ReticketBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reticket_by");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<string>("TicketNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticket_no");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transfer_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_concerns_added_by");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("ix_ticket_concerns_approved_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_ticket_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_ticket_concerns_channel_id");

                    b.HasIndex("ClosedApproveBy")
                        .HasDatabaseName("ix_ticket_concerns_closed_approve_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_concerns_modified_by");

                    b.HasIndex("ReDateBy")
                        .HasDatabaseName("ix_ticket_concerns_re_date_by");

                    b.HasIndex("RequestConcernId")
                        .HasDatabaseName("ix_ticket_concerns_request_concern_id");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_concerns_request_transaction_id");

                    b.HasIndex("RequestorBy")
                        .HasDatabaseName("ix_ticket_concerns_requestor_by");

                    b.HasIndex("ReticketBy")
                        .HasDatabaseName("ix_ticket_concerns_reticket_by");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_ticket_concerns_sub_category_id");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_ticket_concerns_transfer_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_concerns_user_id");

                    b.ToTable("ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("request");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<Guid?>("TransactedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transacted_by");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id")
                        .HasName("pk_ticket_histories");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_histories_request_transaction_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_histories_ticket_concern_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_ticket_histories_ticket_transaction_id");

                    b.HasIndex("TransactedBy")
                        .HasDatabaseName("ix_ticket_histories_transacted_by");

                    b.ToTable("ticket_histories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketReDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Concern_Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_description");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsReDate")
                        .HasColumnType("bit")
                        .HasColumnName("is_re_date");

                    b.Property<bool>("IsRejectReDate")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_re_date");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ReDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("re_date_at");

                    b.Property<Guid?>("ReDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("re_date_by");

                    b.Property<string>("ReDateRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("re_date_remarks");

                    b.Property<DateTime?>("RejectReDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_re_date_at");

                    b.Property<Guid?>("RejectReDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_re_date_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_re_dates");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_re_dates_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_re_dates_modified_by");

                    b.HasIndex("ReDateBy")
                        .HasDatabaseName("ix_ticket_re_dates_re_date_by");

                    b.HasIndex("RejectReDateBy")
                        .HasDatabaseName("ix_ticket_re_dates_reject_re_date_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_ticket_re_dates_request_transaction_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_re_dates_ticket_concern_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_ticket_re_dates_ticket_transaction_id");

                    b.ToTable("ticket_re_dates", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_ticket_transactions");

                    b.ToTable("ticket_transactions", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRejectTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_transfer");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<DateTime?>("RejectTransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_transfer_at");

                    b.Property<Guid?>("RejectTransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_transfer_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("request_transaction_id");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<string>("TicketNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ticket_no");

                    b.Property<int?>("TicketTransactionId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_transaction_id");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transfer_by");

                    b.Property<string>("TransferRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transfer_remarks");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transfer_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_modified_by");

                    b.HasIndex("RejectTransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_reject_transfer_by");

                    b.HasIndex("RequestTransactionId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_request_transaction_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_sub_category_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_ticket_concern_id");

                    b.HasIndex("TicketTransactionId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_ticket_transaction_id");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_transfer_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_user_id");

                    b.ToTable("transfer_ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("EmpId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("emp_id");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPasswordChange")
                        .HasColumnType("bit")
                        .HasColumnName("is_password_change");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_users_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_users_business_unit_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_users_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_users_sub_unit_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_users_unit_id");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bca9f29a-ccfb-4cd5-aa51-f3f61ea635d2"),
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Admin",
                            IsActive = true,
                            IsPasswordChange = true,
                            Password = "$2a$12$ihvpKbpvdRfZLXz.tZKFEulxnTg1tiS11T/MbpufId3rzXoCMW2OK",
                            UserRoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_roles_modified_by");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Permissions = "[\"Overview\",\"User Management\",\"User Role\",\"User Account\",\"Channel\",\"Filing\",\"Generate\",\"Masterlist\",\"Company\",\"Business Unit\",\"Unit\",\"Location\",\"Sub Unit\",\"Department\",\"Category\",\"Sub Category\",\"Channel Setup\",\"Approver\",\"Receiver Concerns\",\"Receiver\"]",
                            UserRoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_approvers_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Approvers")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_approvers_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approvers_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_business_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", "Company")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_business_units_companies_company_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_business_units_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Company");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Channels")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_channels_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ProjectSetup.Project", "Project")
                        .WithMany("Channels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_channels_projects_project_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_channels_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channels_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");

                    b.Navigation("SubUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channel_users_users_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany("Departments")
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_departments_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_locations_sub_units_sub_unit_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ProjectSetup.Project", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_projects_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_projects_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Receiver", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_receivers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_receivers_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_receivers_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_receivers_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_categories_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_sub_units_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "Unit")
                        .WithMany("SubUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_sub_units_units_unit_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.TeamSetup.Team", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_teams_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_teams_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Teams")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_teams_sub_units_sub_unit_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Units")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_units_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_units_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approver_ticketings_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_approver_ticketings_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", "ClosingTicket")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("ClosingTicketId")
                        .HasConstraintName("fk_approver_ticketings_closing_tickets_closing_ticket_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ReTicketConcern", "ReTicketConcern")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("ReTicketConcernId")
                        .HasConstraintName("fk_approver_ticketings_re_ticket_concerns_re_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("ApproverTicketings")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_approver_ticketings_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_approver_ticketings_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany()
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_approver_ticketings_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketReDate", "TicketReDate")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("TicketReDateId")
                        .HasConstraintName("fk_approver_ticketings_ticket_re_dates_ticket_re_date_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany("ApproverTicketings")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_approver_ticketings_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", "TransferTicketConcern")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("TransferTicketConcernId")
                        .HasConstraintName("fk_approver_ticketings_transfer_ticket_concerns_transfer_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approver_ticketings_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("ClosingTicket");

                    b.Navigation("ReTicketConcern");

                    b.Navigation("RequestTransaction");

                    b.Navigation("SubUnit");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketReDate");

                    b.Navigation("TicketTransaction");

                    b.Navigation("TransferTicketConcern");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_closing_tickets_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_closing_tickets_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_closed_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectClosedByUser")
                        .WithMany()
                        .HasForeignKey("RejectClosedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_reject_closed_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany()
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_closing_tickets_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_closing_tickets_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("ClosingTickets")
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_closing_tickets_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany("ClosingTickets")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_closing_tickets_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_closing_tickets_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("ClosedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectClosedByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("SubCategory");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ReTicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_re_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_re_ticket_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_re_ticket_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_re_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReTicketByUser")
                        .WithMany()
                        .HasForeignKey("ReTicketBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_re_ticket_concerns_users_re_ticket_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectReTicketByUser")
                        .WithMany()
                        .HasForeignKey("RejectReTicketBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_re_ticket_concerns_users_reject_re_ticket_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("ReTicketConcerns")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_re_ticket_concerns_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_re_ticket_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany()
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_re_ticket_concerns_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany("ReTicketConcerns")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_re_ticket_concerns_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_re_ticket_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ReTicketByUser");

                    b.Navigation("RejectReTicketByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("SubCategory");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectByUser")
                        .WithMany()
                        .HasForeignKey("RejectBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_reject_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany()
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_request_concerns_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_request_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", null)
                        .WithMany("TicketAttachments")
                        .HasForeignKey("ClosingTicketId")
                        .HasConstraintName("fk_ticket_attachments_closing_tickets_closing_ticket_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ReTicketConcern", "ReTicketConcern")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("ReTicketConcernId")
                        .HasConstraintName("fk_ticket_attachments_re_ticket_concerns_re_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_attachments_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_attachments_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketReDate", "TicketReDate")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketReDateId")
                        .HasConstraintName("fk_ticket_attachments_ticket_re_dates_ticket_re_date_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_ticket_attachments_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", "TransferTicketConcern")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TransferTicketConcernId")
                        .HasConstraintName("fk_ticket_attachments_transfer_ticket_concerns_transfer_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ReTicketConcern");

                    b.Navigation("RequestTransaction");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketReDate");

                    b.Navigation("TicketTransaction");

                    b.Navigation("TransferTicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comments_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("TicketComments")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_comments_request_transactions_request_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RequestTransaction");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCommentView", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comment_views_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany()
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_comment_views_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketComment", "TicketComment")
                        .WithMany("TicketCommentViews")
                        .HasForeignKey("TicketCommentId")
                        .HasConstraintName("fk_ticket_comment_views_ticket_comments_ticket_comment_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ticket_comment_views_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("TicketComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_approved_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_ticket_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_ticket_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ClosedApproveByUser")
                        .WithMany()
                        .HasForeignKey("ClosedApproveBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_closed_approve_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReDateByUser")
                        .WithMany()
                        .HasForeignKey("ReDateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_re_date_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", "RequestConcern")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("RequestConcernId")
                        .HasConstraintName("fk_ticket_concerns_request_concerns_request_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_concerns_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RequestorByUser")
                        .WithMany()
                        .HasForeignKey("RequestorBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_requestor_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReticketByUser")
                        .WithMany()
                        .HasForeignKey("ReticketBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_reticket_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_ticket_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ticket_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("ClosedApproveByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ReDateByUser");

                    b.Navigation("RequestConcern");

                    b.Navigation("RequestTransaction");

                    b.Navigation("RequestorByUser");

                    b.Navigation("ReticketByUser");

                    b.Navigation("SubCategory");

                    b.Navigation("TransferByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketHistory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", null)
                        .WithMany("TicketHistories")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_histories_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany()
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_histories_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", null)
                        .WithMany("TicketHistories")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_ticket_histories_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransactedByUser")
                        .WithMany()
                        .HasForeignKey("TransactedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_histories_users_transacted_by_user_id");

                    b.Navigation("TicketConcern");

                    b.Navigation("TransactedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketReDate", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_re_dates_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_re_dates_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReDateByUser")
                        .WithMany()
                        .HasForeignKey("ReDateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_re_dates_users_re_date_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectReDateByUser")
                        .WithMany()
                        .HasForeignKey("RejectReDateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_re_dates_users_reject_re_date_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany()
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_ticket_re_dates_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketReDates")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_re_dates_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany()
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_ticket_re_dates_ticket_transactions_ticket_transaction_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ReDateByUser");

                    b.Navigation("RejectReDateByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketTransaction");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_transfer_ticket_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_transfer_ticket_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectTransferByUser")
                        .WithMany()
                        .HasForeignKey("RejectTransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_reject_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", "RequestTransaction")
                        .WithMany("TransferTicketConcerns")
                        .HasForeignKey("RequestTransactionId")
                        .HasConstraintName("fk_transfer_ticket_concerns_request_transactions_request_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_transfer_ticket_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TransferTicketConcerns")
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", "TicketTransaction")
                        .WithMany("TransferTicketConcerns")
                        .HasForeignKey("TicketTransactionId")
                        .HasConstraintName("fk_transfer_ticket_concerns_ticket_transactions_ticket_transaction_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_transfer_ticket_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectTransferByUser");

                    b.Navigation("RequestTransaction");

                    b.Navigation("SubCategory");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketTransaction");

                    b.Navigation("TransferByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_users_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_users_locations_location_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_modified_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Users")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_users_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "Units")
                        .WithMany("Users")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_users_units_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_roles_user_role_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("Units");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Navigation("ChannelUsers");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.Navigation("BusinessUnits");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Units");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ProjectSetup.Project", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Navigation("Approvers");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.Navigation("SubUnits");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ReTicketConcern", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.Navigation("TicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestTransaction", b =>
                {
                    b.Navigation("ApproverTicketings");

                    b.Navigation("ReTicketConcerns");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketConcerns");

                    b.Navigation("TicketHistories");

                    b.Navigation("TransferTicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.Navigation("TicketCommentViews");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.Navigation("ClosingTickets");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketReDates");

                    b.Navigation("TransferTicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketReDate", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTransaction", b =>
                {
                    b.Navigation("ApproverTicketings");

                    b.Navigation("ClosingTickets");

                    b.Navigation("ReTicketConcerns");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketHistories");

                    b.Navigation("TransferTicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
