// <auto-generated />
using System;
using MakeItSimple.WebApi.DataAccessLayer.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakeItSimple.WebApi.Migrations
{
    [DbContext(typeof(MisDbContext))]
    [Migration("20250819015455_ApproverUserTable")]
    partial class ApproverUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneBusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("business_unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_unit_code");

                    b.Property<int?>("business_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<string>("business_unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_unit_name");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_business_units");

                    b.ToTable("one_business_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneChargingMIS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("business_unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_unit_code");

                    b.Property<int?>("business_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<string>("business_unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_unit_name");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<string>("company_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_code");

                    b.Property<int?>("company_id")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("company_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("department_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_code");

                    b.Property<int?>("department_id")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("department_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_name");

                    b.Property<string>("department_unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_unit_code");

                    b.Property<int?>("department_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("department_unit_id");

                    b.Property<string>("department_unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_unit_name");

                    b.Property<string>("location_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_code");

                    b.Property<int?>("location_id")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("location_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("sub_unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_code");

                    b.Property<int?>("sub_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<string>("sub_unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_name");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_chargings");

                    b.ToTable("one_chargings", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("company_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_code");

                    b.Property<int?>("company_id")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("company_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_companies");

                    b.ToTable("one_companies", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("department_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_code");

                    b.Property<string>("department_id")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_id");

                    b.Property<string>("department_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_name");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_departments");

                    b.ToTable("one_departments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("location_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_code");

                    b.Property<int?>("location_id")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("location_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_locations");

                    b.ToTable("one_locations", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneSubUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("sub_unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_code");

                    b.Property<int?>("sub_unit_id")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<string>("sub_unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_name");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.HasKey("Id")
                        .HasName("pk_one_sub_units");

                    b.ToTable("one_sub_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.OneCharging.OneUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_added");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("sync_id")
                        .HasColumnType("int")
                        .HasColumnName("sync_id");

                    b.Property<string>("unit_code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_code");

                    b.Property<int?>("unit_id")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<string>("unit_name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_name");

                    b.HasKey("Id")
                        .HasName("pk_one_units");

                    b.ToTable("one_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.PmsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PmsId")
                        .HasColumnType("int")
                        .HasColumnName("pms_id");

                    b.Property<int>("PmsQuestionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("pms_question_type_id");

                    b.Property<int?>("PmsQuestionaireId")
                        .HasColumnType("int")
                        .HasColumnName("pms_questionaire_id");

                    b.Property<int?>("PmsQuestionaireModuleId")
                        .HasColumnType("int")
                        .HasColumnName("pms_questionaire_module_id");

                    b.HasKey("Id")
                        .HasName("pk_pms_details");

                    b.HasIndex("PmsId")
                        .HasDatabaseName("ix_pms_details_pms_id");

                    b.HasIndex("PmsQuestionTypeId")
                        .HasDatabaseName("ix_pms_details_pms_question_type_id");

                    b.HasIndex("PmsQuestionaireId")
                        .HasDatabaseName("ix_pms_details_pms_questionaire_id");

                    b.HasIndex("PmsQuestionaireModuleId")
                        .HasDatabaseName("ix_pms_details_pms_questionaire_module_id");

                    b.ToTable("pms_details", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitles")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account_titles");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account_titles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_account_titles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_account_titles_modified_by");

                    b.ToTable("account_titles", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approvers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approvers_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_approvers_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_approvers_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_approvers_sub_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approvers_user_id");

                    b.ToTable("approvers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("BusinessCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_code");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_name");

                    b.Property<int?>("Business_No")
                        .HasColumnType("int")
                        .HasColumnName("business_no");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_code");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_business_units_added_by");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_business_units_company_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_business_units_modified_by");

                    b.ToTable("business_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_description");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_categories_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_categories_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_categories_modified_by");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("channel_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_channels_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_channels_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_channels_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_channels_sub_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channels_user_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channel_users");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_channel_users_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_users_user_id");

                    b.ToTable("channel_users", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_code");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<int>("CompanyNo")
                        .HasColumnType("int")
                        .HasColumnName("company_no");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_companies_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_companies_modified_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("BusinessUnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_unit_code");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_name");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int")
                        .HasColumnName("department_no");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_departments_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_departments_business_unit_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_departments_modified_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormCheckBoxSetup.FormCheckBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("CheckBoxDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("check_box_description");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("FormQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("form_question_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_form_check_boxes");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_form_check_boxes_added_by");

                    b.HasIndex("FormQuestionId")
                        .HasDatabaseName("ix_form_check_boxes_form_question_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_form_check_boxes_modified_by");

                    b.ToTable("form_check_boxes", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormDropdownSetup.FormDropdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DropdownDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dropdown_description");

                    b.Property<int>("FormQuestionId")
                        .HasColumnType("int")
                        .HasColumnName("form_question_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_form_dropdowns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_form_dropdowns_added_by");

                    b.HasIndex("FormQuestionId")
                        .HasDatabaseName("ix_form_dropdowns_form_question_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_form_dropdowns_modified_by");

                    b.ToTable("form_dropdowns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Form_Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("form_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_forms");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_forms_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_forms_modified_by");

                    b.ToTable("forms", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit")
                        .HasColumnName("is_rejected");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("PmsFormId")
                        .HasColumnType("int")
                        .HasColumnName("pms_form_id");

                    b.Property<Guid?>("Requestor")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestor");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pms");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_pms_modified_by");

                    b.HasIndex("PmsFormId")
                        .HasDatabaseName("ix_pms_pms_form_id");

                    b.HasIndex("Requestor")
                        .HasDatabaseName("ix_pms_requestor");

                    b.ToTable("pms", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PmsId")
                        .HasColumnType("int")
                        .HasColumnName("pms_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_pms_approvals");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_approvals_added_by");

                    b.HasIndex("PmsId")
                        .HasDatabaseName("ix_pms_approvals_pms_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_pms_approvals_user_id");

                    b.ToTable("pms_approvals", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PmsId")
                        .HasColumnType("int")
                        .HasColumnName("pms_id");

                    b.HasKey("Id")
                        .HasName("pk_pms_attachments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_attachments_added_by");

                    b.HasIndex("PmsId")
                        .HasDatabaseName("ix_pms_attachments_pms_id");

                    b.ToTable("pms_attachments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Approver_Level")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PmsId")
                        .HasColumnType("int")
                        .HasColumnName("pms_id");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("request");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<Guid?>("TransactedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transacted_by");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id")
                        .HasName("pk_pms_histories");

                    b.HasIndex("PmsId")
                        .HasDatabaseName("ix_pms_histories_pms_id");

                    b.HasIndex("TransactedBy")
                        .HasDatabaseName("ix_pms_histories_transacted_by");

                    b.ToTable("pms_histories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("PmsId")
                        .HasColumnType("int")
                        .HasColumnName("pms_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_pms_technicians");

                    b.HasIndex("PmsId")
                        .HasDatabaseName("ix_pms_technicians_pms_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_pms_technicians_user_id");

                    b.ToTable("pms_technicians", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormsQuestionSetup.FormQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("question_category_id");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_form_questions");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_form_questions_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_form_questions_modified_by");

                    b.HasIndex("QuestionCategoryId")
                        .HasDatabaseName("ix_form_questions_question_category_id");

                    b.ToTable("form_questions", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_code");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<int>("LocationNo")
                        .HasColumnType("int")
                        .HasColumnName("location_no");

                    b.Property<string>("Manual")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manual");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_locations_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_locations_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_locations_sub_unit_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ApproverUsersSetup.ApproverUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approver_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_users");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("ix_approver_users_approver_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approver_users_user_id");

                    b.ToTable("approver_users", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviderChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("service_provider_id");

                    b.HasKey("Id")
                        .HasName("pk_service_provider_channels");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_service_provider_channels_channel_id");

                    b.HasIndex("ServiceProviderId")
                        .HasDatabaseName("ix_service_provider_channels_service_provider_id");

                    b.ToTable("service_provider_channels", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("ServiceProviderName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_provider_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_service_providers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_service_providers_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_service_providers_modified_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_service_providers_user_id");

                    b.ToTable("service_providers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("PmsFormId")
                        .HasColumnType("int")
                        .HasColumnName("pms_form_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_pms_approvers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_approvers_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_pms_approvers_modified_by");

                    b.HasIndex("PmsFormId")
                        .HasDatabaseName("ix_pms_approvers_pms_form_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_pms_approvers_user_id");

                    b.ToTable("pms_approvers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PmsQuestionaireId")
                        .HasColumnType("int")
                        .HasColumnName("pms_questionaire_id");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_type");

                    b.HasKey("Id")
                        .HasName("pk_pms_question_types");

                    b.HasIndex("PmsQuestionaireId")
                        .HasDatabaseName("ix_pms_question_types_pms_questionaire_id");

                    b.ToTable("pms_question_types", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pms_questionaires");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_questionaires_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_pms_questionaires_modified_by");

                    b.ToTable("pms_questionaires", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaireModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<int>("PmsFormId")
                        .HasColumnType("int")
                        .HasColumnName("pms_form_id");

                    b.Property<string>("QuestionaireModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("questionaire_module_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pms_questionaire_modules");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_questionaire_modules_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_pms_questionaire_modules_modified_by");

                    b.HasIndex("PmsFormId")
                        .HasDatabaseName("ix_pms_questionaire_modules_pms_form_id");

                    b.ToTable("pms_questionaire_modules", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Form_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("form_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pms_forms");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_pms_forms_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_pms_forms_modified_by");

                    b.ToTable("pms_forms", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.QuestionTransactionId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PmsQuestionaireId")
                        .HasColumnType("int")
                        .HasColumnName("pms_questionaire_id");

                    b.Property<int>("PmsQuestionaireModuleId")
                        .HasColumnType("int")
                        .HasColumnName("pms_questionaire_module_id");

                    b.HasKey("Id")
                        .HasName("pk_question_transaction_ids");

                    b.HasIndex("PmsQuestionaireId")
                        .HasDatabaseName("ix_question_transaction_ids_pms_questionaire_id");

                    b.HasIndex("PmsQuestionaireModuleId")
                        .HasDatabaseName("ix_question_transaction_ids_pms_questionaire_module_id");

                    b.ToTable("question_transaction_ids", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Pivot.SubUnitLocationPivot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_unit_locations");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_unit_locations_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_unit_locations_modified_by");

                    b.ToTable("sub_unit_locations", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.QuestionCategorySetup.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("form_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("QuestionCategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_category_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_question_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_question_categories_added_by");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_question_categories_form_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_question_categories_modified_by");

                    b.ToTable("question_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ReceiverSetup.Receiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_receivers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_receivers_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_receivers_business_unit_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_receivers_modified_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_receivers_user_id");

                    b.ToTable("receivers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubCategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_category_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_categories_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_sub_categories_category_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_categories_modified_by");

                    b.ToTable("sub_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Manual")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("manual");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubUnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_code");

                    b.Property<string>("SubUnitName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_unit_name");

                    b.Property<int?>("SubUnitNo")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_no");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_code");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_units_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_sub_units_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_units_modified_by");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_sub_units_unit_id");

                    b.ToTable("sub_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("department_code");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sync_status");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_code");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int")
                        .HasColumnName("unit_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_units_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_units_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_units_modified_by");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<Guid?>("AddedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by_user_id");

                    b.Property<DateTime?>("ApprovedDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_date_at");

                    b.Property<Guid?>("ApprovedDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_date_by");

                    b.Property<Guid?>("ApprovedDateByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_date_by_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DateRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date_remarks");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsRejectDate")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("RejectDateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_date_at");

                    b.Property<Guid?>("RejectDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_date_by");

                    b.Property<Guid?>("RejectDateByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_date_by_user_id");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolution");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_dates");

                    b.HasIndex("AddedByUserId")
                        .HasDatabaseName("ix_approver_dates_added_by_user_id");

                    b.HasIndex("ApprovedDateByUserId")
                        .HasDatabaseName("ix_approver_dates_approved_date_by_user_id");

                    b.HasIndex("RejectDateByUserId")
                        .HasDatabaseName("ix_approver_dates_reject_date_by_user_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_approver_dates_ticket_concern_id");

                    b.ToTable("approver_dates", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverDateId")
                        .HasColumnType("int")
                        .HasColumnName("approver_date_id");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int?>("ClosingTicketId")
                        .HasColumnType("int")
                        .HasColumnName("closing_ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_approve");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketOnHoldId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_on_hold_id");

                    b.Property<int?>("TransferTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_ticket_concern_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_ticketings");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approver_ticketings_added_by");

                    b.HasIndex("ApproverDateId")
                        .HasDatabaseName("ix_approver_ticketings_approver_date_id");

                    b.HasIndex("ClosingTicketId")
                        .HasDatabaseName("ix_approver_ticketings_closing_ticket_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_approver_ticketings_ticket_concern_id");

                    b.HasIndex("TicketOnHoldId")
                        .HasDatabaseName("ix_approver_ticketings_ticket_on_hold_id");

                    b.HasIndex("TransferTicketConcernId")
                        .HasDatabaseName("ix_approver_ticketings_transfer_ticket_concern_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approver_ticketings_user_id");

                    b.ToTable("approver_ticketings", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("ClosedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closed_by");

                    b.Property<DateTime?>("ClosingAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("closing_at");

                    b.Property<string>("ClosingRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("closing_remarks");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsClosing")
                        .HasColumnType("bit")
                        .HasColumnName("is_closing");

                    b.Property<bool>("IsRejectClosed")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_closed");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("RejectClosedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_closed_at");

                    b.Property<Guid?>("RejectClosedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_closed_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolution");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_closing_tickets");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_closing_tickets_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_closing_tickets_category_id");

                    b.HasIndex("ClosedBy")
                        .HasDatabaseName("ix_closing_tickets_closed_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_closing_tickets_modified_by");

                    b.HasIndex("RejectClosedBy")
                        .HasDatabaseName("ix_closing_tickets_reject_closed_by");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_closing_tickets_sub_category_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_closing_tickets_ticket_concern_id");

                    b.ToTable("closing_tickets", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<Guid?>("AssignTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assign_to");

                    b.Property<int?>("BackJobId")
                        .HasColumnType("int")
                        .HasColumnName("back_job_id");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Concern")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern");

                    b.Property<string>("ConcernStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_status");

                    b.Property<DateTime?>("Confirm_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("confirm_at");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateNeeded")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_needed");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("is_done");

                    b.Property<bool>("IsReject")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject");

                    b.Property<bool?>("Is_Confirm")
                        .HasColumnType("bit")
                        .HasColumnName("is_confirm");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<Guid?>("RejectBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("ReqSubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("req_sub_unit_id");

                    b.Property<int?>("ReqUnitId")
                        .HasColumnType("int")
                        .HasColumnName("req_unit_id");

                    b.Property<string>("RequestType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("request_type");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("resolution");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("service_provider_id");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("severity");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<int?>("TransferChannelId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_channel_id");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_request_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_request_concerns_added_by");

                    b.HasIndex("AssignTo")
                        .HasDatabaseName("ix_request_concerns_assign_to");

                    b.HasIndex("BackJobId")
                        .HasDatabaseName("ix_request_concerns_back_job_id");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_request_concerns_business_unit_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_request_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_request_concerns_channel_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_request_concerns_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_request_concerns_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_request_concerns_location_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_request_concerns_modified_by");

                    b.HasIndex("RejectBy")
                        .HasDatabaseName("ix_request_concerns_reject_by");

                    b.HasIndex("ReqSubUnitId")
                        .HasDatabaseName("ix_request_concerns_req_sub_unit_id");

                    b.HasIndex("ReqUnitId")
                        .HasDatabaseName("ix_request_concerns_req_unit_id");

                    b.HasIndex("ServiceProviderId")
                        .HasDatabaseName("ix_request_concerns_service_provider_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_request_concerns_sub_category_id");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_request_concerns_sub_unit_id");

                    b.HasIndex("TransferChannelId")
                        .HasDatabaseName("ix_request_concerns_transfer_channel_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_request_concerns_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_request_concerns_user_id");

                    b.ToTable("request_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverDateId")
                        .HasColumnType("int")
                        .HasColumnName("approver_date_id");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<int?>("ClosingTicketId")
                        .HasColumnType("int")
                        .HasColumnName("closing_ticket_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<int?>("TicketOnHoldId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_on_hold_id");

                    b.Property<int?>("TransferTicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_ticket_concern_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ticket_attachments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_attachments_added_by");

                    b.HasIndex("ApproverDateId")
                        .HasDatabaseName("ix_ticket_attachments_approver_date_id");

                    b.HasIndex("ClosingTicketId")
                        .HasDatabaseName("ix_ticket_attachments_closing_ticket_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_attachments_modified_by");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_attachments_ticket_concern_id");

                    b.HasIndex("TicketOnHoldId")
                        .HasDatabaseName("ix_ticket_attachments_ticket_on_hold_id");

                    b.HasIndex("TransferTicketConcernId")
                        .HasDatabaseName("ix_ticket_attachments_transfer_ticket_concern_id");

                    b.ToTable("ticket_attachments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit")
                        .HasColumnName("is_removed");

                    b.Property<int?>("RequestConcernId")
                        .HasColumnType("int")
                        .HasColumnName("request_concern_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_ticket_categories_category_id");

                    b.HasIndex("RequestConcernId")
                        .HasDatabaseName("ix_ticket_categories_request_concern_id");

                    b.ToTable("ticket_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachment");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsClicked")
                        .HasColumnType("bit")
                        .HasColumnName("is_clicked");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ticket_comments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_comments_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_comments_modified_by");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_comments_ticket_concern_id");

                    b.ToTable("ticket_comments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCommentView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<bool?>("IsClicked")
                        .HasColumnType("bit")
                        .HasColumnName("is_clicked");

                    b.Property<int?>("TicketCommentId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_comment_id");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_comment_views");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_comment_views_added_by");

                    b.HasIndex("TicketCommentId")
                        .HasDatabaseName("ix_ticket_comment_views_ticket_comment_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_comment_views_ticket_concern_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_comment_views_user_id");

                    b.ToTable("ticket_comment_views", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_by");

                    b.Property<Guid?>("ApprovedDateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_date_by");

                    b.Property<Guid?>("AssignTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assign_to");

                    b.Property<Guid?>("ClosedApproveBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closed_approve_by");

                    b.Property<DateTime?>("Closed_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("closed_at");

                    b.Property<string>("ConcernStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concern_status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_approved_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_approve");

                    b.Property<bool?>("IsAssigned")
                        .HasColumnType("bit")
                        .HasColumnName("is_assigned");

                    b.Property<bool?>("IsClosedApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_closed_approve");

                    b.Property<bool?>("IsDateApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_date_approved");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("is_done");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<bool?>("OnHold")
                        .HasColumnType("bit")
                        .HasColumnName("on_hold");

                    b.Property<DateTime?>("OnHoldAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("on_hold_at");

                    b.Property<string>("OnHoldReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("on_hold_reason");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestConcernId")
                        .HasColumnType("int")
                        .HasColumnName("request_concern_id");

                    b.Property<Guid?>("RequestorBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestor_by");

                    b.Property<DateTime?>("Resume_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("resume_at");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transfer_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_concerns_added_by");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("ix_ticket_concerns_approved_by");

                    b.HasIndex("ApprovedDateBy")
                        .HasDatabaseName("ix_ticket_concerns_approved_date_by");

                    b.HasIndex("ClosedApproveBy")
                        .HasDatabaseName("ix_ticket_concerns_closed_approve_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_concerns_modified_by");

                    b.HasIndex("RequestConcernId")
                        .HasDatabaseName("ix_ticket_concerns_request_concern_id");

                    b.HasIndex("RequestorBy")
                        .HasDatabaseName("ix_ticket_concerns_requestor_by");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_ticket_concerns_transfer_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_concerns_user_id");

                    b.ToTable("ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Approver_Level")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("bit")
                        .HasColumnName("is_approve");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<string>("Request")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("request");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<Guid?>("TransactedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transacted_by");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id")
                        .HasName("pk_ticket_histories");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_histories_ticket_concern_id");

                    b.HasIndex("TransactedBy")
                        .HasDatabaseName("ix_ticket_histories_transacted_by");

                    b.ToTable("ticket_histories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketOnHold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsHold")
                        .HasColumnType("bit")
                        .HasColumnName("is_hold");

                    b.Property<bool>("IsRejectOnHold")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_on_hold");

                    b.Property<string>("OnHoldRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("on_hold_remarks");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.Property<DateTime?>("RejectOnHoldAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_on_hold_at");

                    b.Property<Guid?>("RejectOnHoldBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_on_hold_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<DateTime?>("ResumeAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("resume_at");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int?>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_on_holds");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_on_holds_added_by");

                    b.HasIndex("RejectOnHoldBy")
                        .HasDatabaseName("ix_ticket_on_holds_reject_on_hold_by");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_ticket_on_holds_ticket_concern_id");

                    b.ToTable("ticket_on_holds", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsRemoved")
                        .HasColumnType("bit")
                        .HasColumnName("is_removed");

                    b.Property<int?>("RequestConcernId")
                        .HasColumnType("int")
                        .HasColumnName("request_concern_id");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_sub_categories");

                    b.HasIndex("RequestConcernId")
                        .HasDatabaseName("ix_ticket_sub_categories_request_concern_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_ticket_sub_categories_sub_category_id");

                    b.ToTable("ticket_sub_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTechnician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClosingTicketId")
                        .HasColumnType("int")
                        .HasColumnName("closing_ticket_id");

                    b.Property<Guid?>("TechnicianBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("technician_by");

                    b.HasKey("Id")
                        .HasName("pk_ticket_technicians");

                    b.HasIndex("ClosingTicketId")
                        .HasDatabaseName("ix_ticket_technicians_closing_ticket_id");

                    b.HasIndex("TechnicianBy")
                        .HasDatabaseName("ix_ticket_technicians_technician_by");

                    b.ToTable("ticket_technicians", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTransactionNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit")
                        .HasColumnName("is_checked");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Modules")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modules");

                    b.Property<string>("Modules_Parameter")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modules_parameter");

                    b.Property<int>("PathId")
                        .HasColumnType("int")
                        .HasColumnName("path_id");

                    b.Property<Guid>("ReceiveBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("receive_by");

                    b.HasKey("Id")
                        .HasName("pk_ticket_transaction_notifications");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_transaction_notifications_added_by");

                    b.HasIndex("ReceiveBy")
                        .HasDatabaseName("ix_ticket_transaction_notifications_receive_by");

                    b.ToTable("ticket_transaction_notifications", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("approved_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Current_Target_Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("current_target_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRejectTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_reject_transfer");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("bit")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("RejectRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reject_remarks");

                    b.Property<DateTime?>("RejectTransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reject_transfer_at");

                    b.Property<Guid?>("RejectTransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reject_transfer_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transfer_by");

                    b.Property<string>("TransferRemarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transfer_remarks");

                    b.Property<Guid?>("TransferTo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transfer_to");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_transfer_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_modified_by");

                    b.HasIndex("RejectTransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_reject_transfer_by");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_ticket_concern_id");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_transfer_by");

                    b.HasIndex("TransferTo")
                        .HasDatabaseName("ix_transfer_ticket_concerns_transfer_to");

                    b.ToTable("transfer_ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("EmpId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("emp_id");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("file_size");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPasswordChange")
                        .HasColumnType("bit")
                        .HasColumnName("is_password_change");

                    b.Property<bool?>("IsStore")
                        .HasColumnType("bit")
                        .HasColumnName("is_store");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_pic");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_users_added_by");

                    b.HasIndex("BusinessUnitId")
                        .HasDatabaseName("ix_users_business_unit_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_users_company_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_users_location_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_users_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_users_sub_unit_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_users_unit_id");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bca9f29a-ccfb-4cd5-aa51-f3f61ea635d2"),
                            BusinessUnitId = 0,
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Admin",
                            IsActive = true,
                            IsPasswordChange = true,
                            Password = "$2a$12$ihvpKbpvdRfZLXz.tZKFEulxnTg1tiS11T/MbpufId3rzXoCMW2OK",
                            UserRoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("permissions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_roles_modified_by");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Permissions = "[\"Overview\",\"User Management\",\"User Role\",\"User Account\",\"Channel\",\"Filing\",\"Generate\",\"Masterlist\",\"Company\",\"Business Unit\",\"Unit\",\"Location\",\"Sub Unit\",\"Department\",\"Category\",\"Sub Category\",\"Channel Setup\",\"Approver\",\"Receiver Concerns\",\"Receiver\",\"Reports\"]",
                            UserRoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.PmsDetail", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", "Pms")
                        .WithMany("PmsDetails")
                        .HasForeignKey("PmsId")
                        .HasConstraintName("fk_pms_details_pms_pms_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionType", "PmsQuestionType")
                        .WithMany()
                        .HasForeignKey("PmsQuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pms_details_pms_question_types_pms_question_type_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", "PmsQuestionaire")
                        .WithMany()
                        .HasForeignKey("PmsQuestionaireId")
                        .HasConstraintName("fk_pms_details_pms_questionaires_pms_questionaire_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaireModule", "PmsQuestionaireModule")
                        .WithMany()
                        .HasForeignKey("PmsQuestionaireModuleId")
                        .HasConstraintName("fk_pms_details_pms_questionaire_modules_pms_questionaire_module_id");

                    b.Navigation("Pms");

                    b.Navigation("PmsQuestionType");

                    b.Navigation("PmsQuestionaire");

                    b.Navigation("PmsQuestionaireModule");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_approvers_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_user_id1");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Approvers")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_approvers_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("Approvers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approvers_users_user_id11");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_business_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", "Company")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_business_units_companies_company_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_business_units_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Company");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany("Categories")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_categories_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Channels")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_channels_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_user_id1");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_channels_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channels_users_user_id11");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channel_users_users_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany("Departments")
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_departments_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormCheckBoxSetup.FormCheckBox", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_check_boxes_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormsQuestionSetup.FormQuestion", "FormQuestion")
                        .WithMany("FormCheckBoxes")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_check_boxes_form_questions_form_question_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_check_boxes_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("FormQuestion");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormDropdownSetup.FormDropdown", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_dropdowns_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormsQuestionSetup.FormQuestion", "FormQuestion")
                        .WithMany("FormDropdowns")
                        .HasForeignKey("FormQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_dropdowns_form_questions_form_question_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_dropdowns_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("FormQuestion");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Form", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_forms_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_forms_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", "PmsForm")
                        .WithMany()
                        .HasForeignKey("PmsFormId")
                        .HasConstraintName("fk_pms_pms_forms_pms_form_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RequestorByUser")
                        .WithMany()
                        .HasForeignKey("Requestor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_users_requestor_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PmsForm");

                    b.Navigation("RequestorByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsApproval", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_approvals_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", "Pms")
                        .WithMany("PmsApprovals")
                        .HasForeignKey("PmsId")
                        .HasConstraintName("fk_pms_approvals_pms_pms_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_pms_approvals_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Pms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsAttachment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_attachments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", "Pms")
                        .WithMany("PmsAttachments")
                        .HasForeignKey("PmsId")
                        .HasConstraintName("fk_pms_attachments_pms_pms_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Pms");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsHistory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", "Pms")
                        .WithMany("PmsHistories")
                        .HasForeignKey("PmsId")
                        .HasConstraintName("fk_pms_histories_pms_pms_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransactedByUser")
                        .WithMany()
                        .HasForeignKey("TransactedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_histories_users_transacted_by_user_id");

                    b.Navigation("Pms");

                    b.Navigation("TransactedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.PmsTechnician", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", "Pms")
                        .WithMany("PmsTechnicians")
                        .HasForeignKey("PmsId")
                        .HasConstraintName("fk_pms_technicians_pms_pms_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_pms_technicians_users_user_id");

                    b.Navigation("Pms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormsQuestionSetup.FormQuestion", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_questions_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_form_questions_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.QuestionCategorySetup.QuestionCategory", "QuestionCategory")
                        .WithMany("FormQuestions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_questions_question_categories_question_category_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_locations_sub_units_sub_unit_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ApproverUsersSetup.ApproverUser", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "Approver")
                        .WithMany("ApproverUsers")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approver_users_users_approver_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("IssueHandlerUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approver_users_users_user_id");

                    b.Navigation("Approver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviderChannel", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_service_provider_channels_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviders", "ServiceProvider")
                        .WithMany("ServiceProviderChannels")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_provider_channels_service_providers_service_provider_id");

                    b.Navigation("Channel");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviders", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_service_providers_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_service_providers_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", null)
                        .WithMany("SeviceProviders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_service_providers_users_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsApprover", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_approvers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_approvers_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", "PmsForms")
                        .WithMany()
                        .HasForeignKey("PmsFormId")
                        .HasConstraintName("fk_pms_approvers_pms_forms_pms_form_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_pms_approvers_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PmsForms");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionType", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", "PmsQuestionaire")
                        .WithMany("PmsQuestionTypes")
                        .HasForeignKey("PmsQuestionaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pms_question_types_pms_questionaires_pms_questionaire_id");

                    b.Navigation("PmsQuestionaire");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_questionaires_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_questionaires_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaireModule", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_questionaire_modules_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_questionaire_modules_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", "PmsForm")
                        .WithMany("PmsQuestionaireModules")
                        .HasForeignKey("PmsFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pms_questionaire_modules_pms_forms_pms_form_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PmsForm");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_forms_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_pms_forms_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.QuestionTransactionId", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", "PmsQuestionaire")
                        .WithMany("QuestionTransactionIds")
                        .HasForeignKey("PmsQuestionaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_transaction_ids_pms_questionaires_pms_questionaire_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaireModule", "PmsQuestionaireModule")
                        .WithMany("QuestionTransactionIds")
                        .HasForeignKey("PmsQuestionaireModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_transaction_ids_pms_questionaire_modules_pms_questionaire_module_id");

                    b.Navigation("PmsQuestionaire");

                    b.Navigation("PmsQuestionaireModule");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Pivot.SubUnitLocationPivot", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_unit_locations_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_unit_locations_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.QuestionCategorySetup.QuestionCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_question_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.FormSetup.Form", "Form")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_categories_forms_form_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_question_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Form");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ReceiverSetup.Receiver", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_receivers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_receivers_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_receivers_users_user_id1");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("Receivers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_receivers_users_user_id11");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_categories_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_sub_units_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "Unit")
                        .WithMany("SubUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_sub_units_units_unit_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Units")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_units_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_units_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverDate", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("fk_approver_dates_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ApprovedDateByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedDateByUserId")
                        .HasConstraintName("fk_approver_dates_users_approved_date_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectDateByUser")
                        .WithMany()
                        .HasForeignKey("RejectDateByUserId")
                        .HasConstraintName("fk_approver_dates_users_reject_date_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("ApproverDates")
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approver_dates_ticket_concerns_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ApprovedDateByUser");

                    b.Navigation("RejectDateByUser");

                    b.Navigation("TicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approver_ticketings_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ApproverDate", "ApproverDate")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("ApproverDateId")
                        .HasConstraintName("fk_approver_ticketings_approver_dates_approver_date_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", "ClosingTicket")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("ClosingTicketId")
                        .HasConstraintName("fk_approver_ticketings_closing_tickets_closing_ticket_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany()
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_approver_ticketings_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketOnHold", "TicketOnHold")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("TicketOnHoldId")
                        .HasConstraintName("fk_approver_ticketings_ticket_on_holds_ticket_on_hold_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", "TransferTicketConcern")
                        .WithMany("ApproverTickets")
                        .HasForeignKey("TransferTicketConcernId")
                        .HasConstraintName("fk_approver_ticketings_transfer_ticket_concerns_transfer_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("ApproversTickets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approver_ticketings_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ApproverDate");

                    b.Navigation("ClosingTicket");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketOnHold");

                    b.Navigation("TransferTicketConcern");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_closing_tickets_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ClosedByUser")
                        .WithMany()
                        .HasForeignKey("ClosedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_closed_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectClosedByUser")
                        .WithMany()
                        .HasForeignKey("RejectClosedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_tickets_users_reject_closed_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_closing_tickets_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("ClosingTickets")
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_closing_tickets_ticket_concerns_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("ClosedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectClosedByUser");

                    b.Navigation("SubCategory");

                    b.Navigation("TicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "AssignToUser")
                        .WithMany()
                        .HasForeignKey("AssignTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_user_id1");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", "BackJob")
                        .WithMany()
                        .HasForeignKey("BackJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_request_concerns_back_job_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .HasConstraintName("fk_request_concerns_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_request_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_request_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_request_concerns_companies_company_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_request_concerns_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_request_concerns_locations_location_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_user_id2");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectByUser")
                        .WithMany()
                        .HasForeignKey("RejectBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_request_concerns_users_user_id3");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "ReqSubUnit")
                        .WithMany()
                        .HasForeignKey("ReqSubUnitId")
                        .HasConstraintName("fk_request_concerns_sub_units_req_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "ReqUnit")
                        .WithMany()
                        .HasForeignKey("ReqUnitId")
                        .HasConstraintName("fk_request_concerns_units_req_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviders", "ServiceProvider")
                        .WithMany("RequestConcerns")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("fk_request_concerns_service_providers_service_provider_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_request_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_request_concerns_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "TransferChannel")
                        .WithMany()
                        .HasForeignKey("TransferChannelId")
                        .HasConstraintName("fk_request_concerns_channels_transfer_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_request_concerns_units_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("RequestConcerns")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_request_concerns_users_user_id11");

                    b.Navigation("AddedByUser");

                    b.Navigation("AssignToUser");

                    b.Navigation("BackJob");

                    b.Navigation("BusinessUnit");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectByUser");

                    b.Navigation("ReqSubUnit");

                    b.Navigation("ReqUnit");

                    b.Navigation("ServiceProvider");

                    b.Navigation("SubCategory");

                    b.Navigation("SubUnit");

                    b.Navigation("TransferChannel");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ApproverDate", null)
                        .WithMany("TicketAttachments")
                        .HasForeignKey("ApproverDateId")
                        .HasConstraintName("fk_ticket_attachments_approver_dates_approver_date_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", null)
                        .WithMany("TicketAttachments")
                        .HasForeignKey("ClosingTicketId")
                        .HasConstraintName("fk_ticket_attachments_closing_tickets_closing_ticket_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_attachments_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketOnHold", "TicketOnHold")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TicketOnHoldId")
                        .HasConstraintName("fk_ticket_attachments_ticket_on_holds_ticket_on_hold_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", "TransferTicketConcern")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("TransferTicketConcernId")
                        .HasConstraintName("fk_ticket_attachments_transfer_ticket_concerns_transfer_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TicketConcern");

                    b.Navigation("TicketOnHold");

                    b.Navigation("TransferTicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_ticket_categories_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", "RequestConcern")
                        .WithMany("TicketCategories")
                        .HasForeignKey("RequestConcernId")
                        .HasConstraintName("fk_ticket_categories_request_concerns_request_concern_id");

                    b.Navigation("Category");

                    b.Navigation("RequestConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comments_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketComments")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_comments_ticket_concerns_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketCommentView", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_comment_views_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketComment", "TicketComment")
                        .WithMany("TicketCommentViews")
                        .HasForeignKey("TicketCommentId")
                        .HasConstraintName("fk_ticket_comment_views_ticket_comments_ticket_comment_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketCommentViews")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_comment_views_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ticket_comment_views_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("TicketComment");

                    b.Navigation("TicketConcern");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id1");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ApprovedDateByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedDateBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id2");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ClosedApproveByUser")
                        .WithMany()
                        .HasForeignKey("ClosedApproveBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id3");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id4");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", "RequestConcern")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("RequestConcernId")
                        .HasConstraintName("fk_ticket_concerns_request_concerns_request_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RequestorByUser")
                        .WithMany()
                        .HasForeignKey("RequestorBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id5");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id6");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ticket_concerns_users_user_id11");

                    b.Navigation("AddedByUser");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("ApprovedDateByUser");

                    b.Navigation("ClosedApproveByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RequestConcern");

                    b.Navigation("RequestorByUser");

                    b.Navigation("TransferByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketHistory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("ticketHistories")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_histories_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransactedByUser")
                        .WithMany()
                        .HasForeignKey("TransactedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_histories_users_transacted_by_user_id");

                    b.Navigation("TicketConcern");

                    b.Navigation("TransactedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketOnHold", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_on_holds_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectOnHoldByUser")
                        .WithMany()
                        .HasForeignKey("RejectOnHoldBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_on_holds_users_reject_on_hold_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TicketOnHolds")
                        .HasForeignKey("TicketConcernId")
                        .HasConstraintName("fk_ticket_on_holds_ticket_concerns_ticket_concern_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("RejectOnHoldByUser");

                    b.Navigation("TicketConcern");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketSubCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", "RequestConcern")
                        .WithMany("TicketSubCategories")
                        .HasForeignKey("RequestConcernId")
                        .HasConstraintName("fk_ticket_sub_categories_request_concerns_request_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("fk_ticket_sub_categories_sub_categories_sub_category_id");

                    b.Navigation("RequestConcern");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTechnician", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", "ClosingTicket")
                        .WithMany("ticketTechnicians")
                        .HasForeignKey("ClosingTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_technicians_closing_tickets_closing_ticket_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TechnicianByUser")
                        .WithMany()
                        .HasForeignKey("TechnicianBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_technicians_users_technician_by_user_id");

                    b.Navigation("ClosingTicket");

                    b.Navigation("TechnicianByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketTransactionNotification", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_transaction_notifications_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReceiveByUser")
                        .WithMany()
                        .HasForeignKey("ReceiveBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_transaction_notifications_users_receive_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ReceiveByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectTransferByUser")
                        .WithMany()
                        .HasForeignKey("RejectTransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_reject_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany("TransferTicketConcerns")
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferToUser")
                        .WithMany()
                        .HasForeignKey("TransferTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_transfer_to_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectTransferByUser");

                    b.Navigation("TicketConcern");

                    b.Navigation("TransferByUser");

                    b.Navigation("TransferToUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_business_units_business_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_users_companies_company_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_users_locations_location_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_modified_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Users")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_users_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", "Units")
                        .WithMany("Users")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("fk_users_units_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_roles_user_role_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("BusinessUnit");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("Units");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.BusinessUnitSetup.BusinessUnit", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("ChannelUsers");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.Navigation("BusinessUnits");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Units");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Form", b =>
                {
                    b.Navigation("QuestionCategories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormSetup.Pms", b =>
                {
                    b.Navigation("PmsApprovals");

                    b.Navigation("PmsAttachments");

                    b.Navigation("PmsDetails");

                    b.Navigation("PmsHistories");

                    b.Navigation("PmsTechnicians");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.FormsQuestionSetup.FormQuestion", b =>
                {
                    b.Navigation("FormCheckBoxes");

                    b.Navigation("FormDropdowns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_One.ServiceProviderSetup.ServiceProviders", b =>
                {
                    b.Navigation("RequestConcerns");

                    b.Navigation("ServiceProviderChannels");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaire", b =>
                {
                    b.Navigation("PmsQuestionTypes");

                    b.Navigation("QuestionTransactionIds");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.PmsQuestionaireModule", b =>
                {
                    b.Navigation("QuestionTransactionIds");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.Phase_Two.Pms_Form_Setup.PmsForm", b =>
                {
                    b.Navigation("PmsQuestionaireModules");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.QuestionCategorySetup.QuestionCategory", b =>
                {
                    b.Navigation("FormQuestions");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Navigation("Approvers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.UnitSetup.Unit", b =>
                {
                    b.Navigation("SubUnits");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverDate", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTicket", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");

                    b.Navigation("ticketTechnicians");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestConcern", b =>
                {
                    b.Navigation("TicketCategories");

                    b.Navigation("TicketConcerns");

                    b.Navigation("TicketSubCategories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketComment", b =>
                {
                    b.Navigation("TicketCommentViews");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.Navigation("ApproverDates");

                    b.Navigation("ClosingTickets");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketCommentViews");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketOnHolds");

                    b.Navigation("TransferTicketConcerns");

                    b.Navigation("ticketHistories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketOnHold", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.Navigation("ApproverTickets");

                    b.Navigation("TicketAttachments");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.Navigation("ApproverUsers");

                    b.Navigation("Approvers");

                    b.Navigation("ApproversTickets");

                    b.Navigation("Channels");

                    b.Navigation("IssueHandlerUsers");

                    b.Navigation("Receivers");

                    b.Navigation("RequestConcerns");

                    b.Navigation("SeviceProviders");

                    b.Navigation("TicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
